"0","Model <- function (p, times=seq(1,4559)) {"
"0","    derivs <- function(t,s,p) { #t = time, s = state, p = pars"
"0","        with(as.list(c(s,p)), {"
"0","              #define parameters"
"0","              r <- 0.008314                         #gas constant"
"0","              ea_dep <- p[1]                        #activation energy of SOM depolymerization"
"0","              ea_upt <- p[2]                        #activation energy of DOC uptake           "
"0","              a_dep <- p[3]                         #pre-exponential constant for SOM depolymerization"
"0","              a_upt <- p[4]                         #pre-exponential constant for uptake"
"0","              frac <- p[5]                          #fraction of unprotected SOM, Magill et al. 2000      "
"0","              litter_c <- litterc_inputin(t)        #litter C input to SOC"
"0","              cnl <- p[8]                           #C:N of litter"
"0","              litter_n <- litterc_inputin(t)/cnl    #litter N input to SOC"
"0","              doc_input <- doc_inputin(t)           #litter C input to DOC"
"0","              cns <- p[9]                           #C:N of soil"
"0","              don_input <- doc_inputin(t)/cns       #litter N input to DOC"
"0","              cnm <- p[10]                          #C:N of microbial biomass"
"0","              cne <- p[11]                          #C:N of enzymes"
"0","              km_dep <- p[12]                       #half-saturation constant for SOM depolymerization"
"0","              km_upt <- p[13]                       #half-saturation constant for DOC uptake"
"0","              r_ecloss <- p[14]                     #enzyme turnover rate           "
"0","              r_death <- p[15]                      #microbial turnover rate"
"0","              cue <- p[16]                          #carbon use efficiency"
"0","              a <- p[17]                            #proportion of enzyme pool acting on SOC"
"0","              pconst <- p[18]                       #proportion of assimilated C allocated to enzyme production"
"0","              qconst <- p[19]                       #proportion of assimilated N allocated to enzyme production"
"0","              mic_to_som <- p[20]                   #fraction of dead microbial biomass allocated to SOM"
"0","              km_o2 <- p[21]                        #Michaelis constant for O2"
"0","              dgas <- p[22]                         #diffusion coefficient for O2 in air"
"0","              dliq <- p[23]                         #diffusion coefficient for unprotected SOM and DOM in liquid"
"0","              o2airfrac <- p[24]                    #volume fraction of O2 in air"
"0","              bd <- p[25]                           #bulk density"
"0","              pd <- p[26]                           #particle density"
"0","              sat <- p[29]                          #saturation level"
"0","              "
"0","                    porosity = 1 - bd/pd            #calculate porosity"
"0","                    soilm = -p[27] + p[28]*mois(t)  #calculate soil moisture scalar"
"0","                    soilm = ifelse(soilm > sat, sat, soilm) #set upper bound on soil moisture (saturation)"
"0","                    soilm = ifelse(soilm < 0.1, 0.1, soilm) #set lower bound on soil moisture"
"0","                    o2 <- dgas * o2airfrac * (porosity - soilm)^(4/3) #calculate oxygen concentration"
"0","                    sol_soc <- dliq * soilm^3 * frac * soc            #calculate unprotected SOC"
"0","                    sol_son <- dliq * soilm^3 * frac * son            #calculate unprotected SON"
"0","                    vmax_dep = a_dep * exp(-ea_dep / (r * (temp(t) + 273))) #calculate maximum depolymerization rate"
"0","                    vmax_upt = a_upt * exp(-ea_upt / (r * (temp(t) + 273))) #calculate maximum depolymerization rate"
"0","                    "
"0","                     upt_c <- mic_c * vmax_upt * doc / (km_upt + doc) * o2/(km_o2 + o2) #calculate DOC uptake"
"0","                     cmin <- upt_c * (1-cue)        #calculate initial C mineralization"
"0","                     upt_n <- mic_n * vmax_upt * don / (km_upt + don) * o2/(km_o2 + o2) #calculate DON uptake"
"0","                     death_c <- r_death * mic_c^2   #calculate density-dependent microbial C turnover"
"0","                     death_n <- r_death * mic_n^2   #calculate density-dependent microbial N turnover"
"0","                    "
"0","                     enz_c <- pconst * cue * upt_c  #calculate potential enzyme C production"
"0","                     enz_n <- qconst * upt_n        #calculate potential enzyme N production"
"0","                     eprod <- ifelse(enz_c/cne >= enz_n, enz_n, enz_c/cne) #calculate actual enzyme based on Liebig's Law"
"0","                     growth_c <- (1-pconst) * (upt_c * cue) + enz_c - cne * eprod #calculate potential microbial biomass C growth"
"0","                     growth_n <- (1-qconst) * upt_n + enz_n - eprod #calculate potential microbial biomass N growth"
"0","                     growth <- ifelse(growth_c/cnm >= growth_n, growth_n, growth_c/cnm) #calculate actual microbial biomass growth based on Liebig's Law of the minimum (Schimel & Weintraub 2003 SBB)"
"0","                     "
"0","                     overflow <- growth_c - cnm * growth #calculate overflow metabolism of C"
"0","                     nmin <- growth_n - growth           #calculate N mineralization"
"0","                    "
"0","                     dmic_c <- cnm*growth - death_c      #calculate change in microbial C pool"
"0","                     dmic_n <- growth - death_n          #calculate change in microbial N pool"
"0","                    "
"0","                     eloss <- r_ecloss * ec              #calculate enzyme turnover"
"0","                     dec <- eprod - eloss                #calculate change in enzyme pool"
"0","                    "
"0","                     decom_c = vmax_dep * a * ec * sol_soc / (km_dep + sol_soc + ec) #calculate depolymerization of SOC using ECA kinetics (Tang 2015 GMD)"
"0","                     decom_n = vmax_dep * (1-a) * ec * sol_son / (km_dep + sol_son + ec) #calculate depolymerization of SON using ECA kinetics "
"0","                    "
"0","                    dsoc = litter_c + death_c * mic_to_som - decom_c #calculate change in SOC pool"
"0","                    dson = litter_n + death_n * mic_to_som - decom_n #calculate change in SON pool"
"0","                    ddoc = doc_input + decom_c + death_c * (1-mic_to_som) + cne*eloss - upt_c #calculate change in DOC pool"
"0","                    ddon = don_input + decom_n + death_n * (1-mic_to_som) + eloss - upt_n #calculate change in DON pool"
"0","                    dcout = cmin + overflow         #calculate C efflux"
"0","              return(list(c(dmic_c, dmic_n, dsoc, dson, ddoc, ddon, dec, dcout)))"
"0","        })"
"0","    }"
"0","    s <- c(mic_c = 1.9703, mic_n = 0.1970, soc = 65.25 , son = 2.1917, doc = 0.0020, don = 0.0011, ec = 0.0339, cout = 0) #initial states"
"0","    temp <- approxfun(input$indexHour, input$temperatureC) #temperature input function"
"0","    mois <- approxfun(input$indexHour, input$moistureVWC) #moisture input function"
"0","    doc_inputin <- approxfun(1:4559,DOC_input) #DOC input function"
"0","    litterc_inputin <- approxfun(1:4559,Litterc_input) #SOC input function"
"0","    output <- ode(y = s, times=times, func=derivs, parms = p) #solve ode, return output"
"0","      return(as.data.frame(cbind(time = output[1:4558,1], cout = diff(output[1:4559,""cout""]), soc = output[1:4558,""soc""], mic_c = output[1:4558,""mic_c""], mic_n = output[1:4558,""mic_n""], son = output[1:4558,""son""], doc = output[1:4558,""doc""], don = output[1:4558,""don""], ec = output[1:4558,""ec""] )))"
"0","}"
