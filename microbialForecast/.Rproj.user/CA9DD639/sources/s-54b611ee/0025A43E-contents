# Visualize effect size estimates (beta covariates) from all model
source("/projectnb2/talbot-lab-data/zrwerbin/temporal_forecast/source.R")
pacman::p_load(stringr, forestplot, gridExtra, ggpubr)



sum.all <- readRDS(here("data/summary/all_fcast_effects.rds"))
df_all_cov <- sum.all %>% filter(time_period == "2015-11_2020-01" & model_name == "all_covariates")
df_cycl <-		sum.all %>% filter(time_period ==  "2015-11_2020-01" & model_name == "cycl_only")

df_all_cov$beta <- order_betas(df_all_cov$beta)

all_cov_cycl_params <- df_all_cov %>% filter(beta %in% c("sin","cos"))
all_cov_vals <- all_cov_cycl_params %>% pivot_wider(id_cols = c("taxon","model_name","fcast_type",
																																"pretty_name","pretty_group","only_rank"),
																										names_from = beta,
																										values_from = "Mean")
cycl_vals <- df_cycl %>% pivot_wider(id_cols = c("taxon","model_name","fcast_type",
																								 "pretty_name","pretty_group","only_rank"),
																		 names_from = beta,
																		 values_from = "Mean")

# Couldn't figure out how to vectorize.
out <- list()
for (i in 1:nrow(cycl_vals)) out[[i]] <- sin_cos_to_seasonality(cycl_vals$sin[[i]], cycl_vals$cos[[i]])
seas <- rbindlist(out)
cycl_vals <- cbind.data.frame(cycl_vals, seas)

out <- list()
for (i in 1:nrow(all_cov_vals)) out[[i]] <- sin_cos_to_seasonality(all_cov_vals$sin[[i]], all_cov_vals$cos[[i]])
seas <- rbindlist(out)
all_cov_vals <- cbind.data.frame(all_cov_vals, seas)

a <- ggplot(cycl_vals) +
	geom_jitter(aes(x = only_rank,y = amplitude,
									color = pretty_group),
							width=.2, height = 0, size=4, alpha = .4, show.legend = F) +
	ggtitle("Seasonal amplitude") +
	xlab(NULL) + ylab("Seasonal amplitude") +
	facet_grid(cols = vars(pretty_group), drop = T,
						 scales = "free", space = "free_x") +
	theme_bw() + theme(text = element_text(size = 16),
										 axis.text.x=element_text(#angle = 45, hjust = 1, vjust = 1),
										 	angle = 320, vjust=1, hjust = -0.05),
										 strip.text.y = element_text(size=12,face="bold")) +
	geom_smooth(aes(x = as.numeric(only_rank), y = amplitude), show.legend = F)

