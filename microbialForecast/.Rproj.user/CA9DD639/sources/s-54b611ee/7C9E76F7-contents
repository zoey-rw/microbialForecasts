# Go through Kraken2 outputs for Harvard forest soils
# Take the top 100 genera for each sample
# Combine all the sample data and get most prevalent 50 taxa

# Could be sped up by swapping read.lines with fread in pavian::read_report2()
# Or just parallel loop via foreach
library(doParallel)

cl <- makeCluster(28, outfile="")
registerDoParallel(cl)

source("/projectnb/talbot-lab-data/zrwerbin/temporal_forecast/functions/helperFunctions.r")


soil_sample_dir <- "/projectnb2/talbot-lab-data/zrwerbin/metagenomics/metaGEM/qfiltered"
samp_names <- list.files(soil_sample_dir, recursive=F)
samp <- samp_names[[2]]

sample_list <- list()
sample_list = foreach(samp = samp_names, 
											.errorhandling = "pass") %dopar% {
	library(pavian)
	library(tidyverse)
	print(samp)
	pluspf_path <- file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output/reports/pluspf/", paste0(samp, "_k2_report_pluspf.txt")) 
	
	if (file.exists(pluspf_path)){
		report_pluspf <- read_report2(pluspf_path)
		family_out_df <- report_pluspf %>% filter(taxRank=="F") %>% group_by(name) %>% 
			arrange(percentage) %>% tail(500) %>% select(percentage,name) %>% ungroup() %>% 
			mutate(unclassified = 100-sum(percentage)) %>% mutate(sampleID=samp)
		genus_out_df <- report_pluspf %>% filter(taxRank=="G") %>% group_by(name) %>% 
			arrange(percentage) %>% tail(500) %>% select(percentage,name) %>% ungroup() %>% 
			mutate(unclassified = 100-sum(percentage)) %>% mutate(sampleID=samp)
		species_out_df <- report_pluspf %>% filter(taxRank=="S") %>% group_by(name) %>% 
			arrange(percentage) %>% tail(500) %>% select(percentage,name) %>% ungroup() %>% 
			mutate(unclassified = 100-sum(percentage)) %>% mutate(sampleID=samp)
		return(list(family_out_df, genus_out_df, species_out_df))
	} 
											}
fam_list <- lapply(sample_list, "[[", 1)
gen_list <- lapply(sample_list, "[[", 2)
spec_list <- lapply(sample_list, "[[", 3)

all_samp_fam <- do.call(rbind, fam_list)
all_samp_gen <- do.call(rbind, gen_list)
all_samp_spec <- do.call(rbind, spec_list)

saveRDS(all_samp_fam, "/projectnb2/talbot-lab-data/zrwerbin/interactions/fam_abund.rds")
saveRDS(all_samp_gen, "/projectnb2/talbot-lab-data/zrwerbin/interactions/genus_abund.rds")
saveRDS(all_samp_spec, "/projectnb2/talbot-lab-data/zrwerbin/interactions/spec_abund.rds")


all_samp_df <- readRDS("/projectnb2/talbot-lab-data/zrwerbin/interactions/genus_abund.rds")

# Simplify to top genera and add sample info
#n.taxa <- 200
#prev <- table(all_samp_df$name) %>% sort() %>% tail(n.taxa)
#prev_abun <- all_samp_df %>% filter(name %in% names(prev))

# Jk we won't subset the taxa yet
prev_abun <- all_samp_df

abun_df <- cbind(parseNEONsampleIDs(prev_abun$sampleID), prev_abun[,-c(4)])

# VISUALIZE OUR 6 CURRENT GENERA
genera_list <- c("g_Bacillus", "g_Methanosarcina", "g_Pseudomonas", 
								 "g_Saccharomyces", "g_Staphylococcus", "g_Clostridium","g_Nitrobacter","g_Nitrospira","g_Nitrospirillum","g_Nitratireductor","g_Geobacter","g_Acinetobacter","g_Klebsiella", "g_Mycobacterium","g_Vibrio")
genera_df <- abun_df %>% 
	#filter(!plotID %in% c("HARV_010","HARV_021","HARV_033")) %>% 
	filter(name %in% genera_list)

genera_df_scaled <- genera_df %>% group_by(name) %>% mutate(scaled_percent = scale(percentage))
library(ggplot2)
library(broom)
library(tidycat)

ggplot(genera_df_scaled) + 
	geom_point(aes(y = horizon, x = siteID, 
								 #fill = scaled_percent, 
								 color = scaled_percent,
								 size = scaled_percent), 
						 position=position_jitter()) + 
	facet_grid(~name, scales="free") + scale_color_gradient(low = "blue", high = "red")

lm_out <- list()
for (gen in genera_list){
	print(gen)
	df <- genera_df_scaled %>% filter(name == gen)
	if (nrow(df)==0) next()
	gen_lm <- tidy(lm(scaled_percent ~ as.factor(horizon), df))
	gen_lm$name <- gen
	lm_out[[gen]] <- gen_lm
}
lm_out <- do.call(rbind, lm_out)
horizon_coef <- lm_out %>% filter(grepl("horizon", term))
horizon_coef$indicator <- ifelse(horizon_coef$p.value < .1, T, F)
genera_df_scaled <- merge(genera_df_scaled, horizon_coef)

dotplot <- ggplot(genera_df_scaled[genera_df_scaled$indicator==T,]) + 
	geom_point(aes(y = horizon, x = siteID, 
								 #fill = scaled_percent, 
								 color = scaled_percent,
								 size = scaled_percent), 
						 position=position_jitter()) + 
	facet_grid(~name, scales="free") + scale_color_gradient(low = "blue", high = "red") + theme_bw()
dotplot

library(ggridges)
ridgeplot <- ggplot(genera_df_scaled[genera_df_scaled$indicator==T,]) + 
	geom_density_ridges_gradient(aes(y = as.factor(horizon), 
													x = scaled_percent, fill = stat(y)), 
													scale = 2, rel_min_height = .01) + #coord_flip() +
	facet_grid(~name, scales="free") + scale_fill_gradient(low = "blue", high = "red") +  theme_ridges(font_size = 13, grid = TRUE) 
ridgeplot

ggarrange(dotplot, ridgeplot, nrow=2)

ggplot(genera_df_scaled[genera_df_scaled$indicator==T,], 
			 aes(y = `scaled_percent`, x = as.factor(horizon)#, fill = stat(y)
			 		)) +
	geom_density_ridges_gradient(aes(fill = scaled_percent), scale = 3, rel_min_height = 0.01, gradient_lwd = 1.) + 
	coord_flip() +
	facet_wrap(~name, scales="free") + scale_fill_gradient(low = "blue", high = "red")


all_samp_spec <- readRDS("/projectnb2/talbot-lab-data/zrwerbin/interactions/spec_abund.rds")


all_samp_spec[grep("Nitratireductor", all_samp_spec$name),]
all_samp_df[grep("Nitratireductor", all_samp_df$name),]



master_df <- readRDS("/projectnb2/talbot-lab-data/zrwerbin/interactions/data/NEON_soilCovariates_allsites.rds")
all_samp_spec$sampleID<-toupper(all_samp_spec$sampleID) 

master_df$simpleSampleID <- gsub("-DNA[123]|-comp|gen","",master_df$sampleID, ignore.case = T)
all_samp_spec$simpleSampleID <- gsub("-DNA[123]|-comp|-gen","",all_samp_spec$sampleID, ignore.case = T)

harv_master <- master_df %>% filter(siteID=="HARV")


all_samp_df <- cbind(all_samp_df, parseNEONsampleIDs(all_samp_df$sampleID))
harv_master <- cbind(harv_master, parseNEONsampleIDs(harv_master$sampleID))

genus_df <- merge(all_samp_df, harv_master, by = "plot_date")
nitro_df <- genus_df[grepl("nitro",genus_df$name, ignore.case = T),]

nwino <- nitro_df[nitro_df$name=="g_Nitrobacter",]
summary(lm(percentage ~ CNratio + soilInCaClpH + soilMoisture + horizon.y, nwino))
summary(lm(percentage ~  soilInCaClpH + soilMoisture + horizon.y, nwino))
summary(lm(percentage ~  soilMoisture, nwino))
summary(lm(percentage ~  soilMoisture, nwino))
