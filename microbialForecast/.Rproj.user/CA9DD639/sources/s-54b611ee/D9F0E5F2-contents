---
title: "model_predictions_figures"
output: html_document
date: '2022-06-30'
editor_options: 
  chunk_output_type: console
---

```{r}
library(reshape2) #melt()
library(googlesheets4) #read_sheet()
library(tidyverse)
library(MLmetrics) #F1_Score()
library(ConfusionTableR) #binary_class_cm()
library(fmsb) #radarchart()
library(data.table) #rbindlist()
```

```{r}
setwd("/projectnb2/talbot-lab-data/metabolic_models/aeng/")

# read in data
models_lit <- read_sheet("https://docs.google.com/spreadsheets/d/1YWAp-wdQWh9OHmw82w-2QuqsCYh3IgXh4QE17t7en0g/edit#gid=771669281", sheet = "models literature")
cobra_sims <- read.csv("output_major_carbon_sources.csv")
cobra_sims <- read.csv("output_major_carbon_sources_M8.csv")
```

Cleaning up simulation data frame
```{r}
cobra_sims <- select(cobra_sims, -X0)
rownames(cobra_sims) <- cobra_sims[,1]
rownames(cobra_sims)[1] <- "neg_control"
cobra_sims <- cobra_sims[,-1]

# we want to rename the column names to be modelID's rather than the model (.xml)
modelID <- read_sheet("https://docs.google.com/spreadsheets/d/1YWAp-wdQWh9OHmw82w-2QuqsCYh3IgXh4QE17t7en0g/edit#gid=771669281", sheet = "modelID")

cobra_names <- modelID %>%
  filter(model_name %in% names(cobra_sims))
cobra_sims_new <- cobra_sims %>%
  rename_with(.cols = cobra_names$model_name, .fn = function(x) cobra_names$modelID[cobra_names$model_name %in% x])

# renaming for M8 models
cobra_names <- modelID %>%
  filter(model_name_M8 %in% names(cobra_sims))
cobra_sims_new <- cobra_sims %>%
  rename_with(.cols = cobra_names$model_name_M8, .fn = function(x) cobra_names$modelID[cobra_names$model_name_M8 %in% x])
```

```{r}
# melting data frame to be long format
cobra_sims_long <- cobra_sims_new %>% rownames_to_column("c_source") %>%  
  pivot_longer(cols = 1:ncol(cobra_sims)+1)
neg_control <- cobra_sims_long %>% filter(c_source == "neg_control")  %>% 
  rename("neg_control"="value") %>% select(-c_source)
c_source <- cobra_sims_long %>% filter(c_source != "neg_control")
cobra_sims_long <- merge(neg_control, c_source)
colnames(cobra_sims_long)[1] <- "modelID"
```

Converting cobra simulation results into binary to indicate growth or no growth
```{r}
cobra_sims_long <- cobra_sims_long %>% mutate_at(vars(value, neg_control), funs(round(., 3)))

cobra_sims_long$comp <- NA

for (row in 1:nrow(cobra_sims_long)) {
  value <- cobra_sims_long[row,]$value
  neg_control <- cobra_sims_long[row,]$neg_control
  #print(value)
  #print(neg_control)
  
  if (value > neg_control) {
    cobra_sims_long[row,]$comp = 1
  } else if (value == neg_control) {
    cobra_sims_long[row,]$comp = 0
  } else if (value < neg_control) {
    cobra_sims_long[row,]$comp = 0
  }
}
```

Cleaning up models_lit (literature data for single C source growth)

```{r}
# subset/filter data frame to contain columns of interest
models_lit <- models_lit %>% select(-c("Strain", "Culture medium", "Subgroup", "O2 tolerance", "Source"))
models_lit$index <- 1:nrow(models_lit)
```

```{r}
# rename columns for metabolites to be coded as BiGG IDs to match the cobra_sims_long data frame using
bigg_id <- read_sheet("https://docs.google.com/spreadsheets/d/1YWAp-wdQWh9OHmw82w-2QuqsCYh3IgXh4QE17t7en0g/edit#gid=771669281", sheet = "bigg_id")

met_names <- bigg_id %>%
  filter(compound %in% names(models_lit))

models_lit_partial <- models_lit %>% select(met_names$compound)
models_lit_partial$index <- 1:nrow(models_lit_partial)
models_ID <- subset(models_lit, select = c(modelID, index))

models_lit <- merge(models_ID, models_lit_partial)
models_lit <- models_lit[, -1] # dropping the index column

models_lit_new <- models_lit %>%
  rename_with(.cols = met_names$compound, .fn = function(x) met_names$bigg_id[met_names$compound %in% x])

rownames(models_lit_new) <- models_lit_new[,1]
models_lit_new <- models_lit_new[,-1]
models_lit_new <- as.data.frame(t(models_lit_new))
```

```{r}
# melt data frame to be long
models_lit_long <- models_lit_new %>% rownames_to_column("c_source") %>% 
  pivot_longer(cols = 1:ncol(models_lit_new)+1)
colnames(models_lit_long)[2] <- "modelID"
```

```{r}
# re-coding the "values" to be in binary or NA, where Y = 1, N = 0, "No data = NA"
for (row in 1:nrow(models_lit_long)) {
  if (is.na(models_lit_long[row,]$value)) {
} else if (models_lit_long[row,]$value == "Y") {
  models_lit_long[row,]$value = "1"
} else if (models_lit_long[row,]$value == "N") {
  models_lit_long[row,]$value = "0"
} else if (models_lit_long[row,]$value == "No data") {
  models_lit_long[row,]$value = "NA"
}
}

models_lit_long$value <- as.numeric(models_lit_long$value)
```

Comparing the models_lit_long to cobra_sims_long and coding TP, TN, FP, FN

```{r}
cobra_sims_long$validation <- NA
for (row in 1:nrow(cobra_sims_long)) {
    model_num <- cobra_sims_long[row,]$modelID
    c_source <- cobra_sims_long[row,]$c_source
    cobra_value <- cobra_sims_long[row,]$comp
    lit_value <- models_lit_long[which(models_lit_long$c_source == c_source & models_lit_long$modelID == model_num),]$value
    
    print(model_num)
    print(c_source)
    print(lit_value)
    
    if (length(lit_value) != 0) {
    if (!is.na(lit_value)) {
    if (cobra_value == 1 & lit_value == 1) {
        cobra_sims_long[row,]$validation = "TP"
    } else if (cobra_value == 1 & lit_value == 0) {
        cobra_sims_long[row,]$validation = "FP"
    } else if (cobra_value == 0 & lit_value == 1) {
        cobra_sims_long[row,]$validation = "FN"
    } else if (cobra_value == 0 & lit_value == 0) {
        cobra_sims_long[row,]$validation = "TN"
  } 
    print(cobra_sims_long[row,]$validation) 
    }
  }
}
```

Calculating F1 scores for sugars

```{r}
c_source_list <- list("acgam_e", "algac__M_e", "cellb_e", "chitin_e", "chitos_e", "fru_e", "gal_e", "glc__D_e", "lcts_e", "lyx__L_e", "malt_e", "man_e", "pectin_e", "pyr_e", "raffin_e", "rib__D_e", "starch_e", "succ_e", "sucr_e", "tre_e", "xyl__D_e", "xylan4_e") 

F1_c_source_list <- c()
for (met in c_source_list) {
  
  c_source_df <- merge(models_lit_long[models_lit_long$c_source == met,] %>% select(modelID, c_source, obs = value), 
                       cobra_sims_long[cobra_sims_long$c_source == met,] %>% select(modelID, c_source, pred = comp, validation))
  # Remove missing observations
  c_source_df <- c_source_df %>% filter(!is.na(obs))
   
  # Convert to factors
    c_source_df <- c_source_df %>% mutate(pred = factor(c_source_df$pred, levels=c("1","0")),
                                          obs = factor(c_source_df$obs, levels=c("1","0")))
    
    #confusion_results <- confusionMatrix(c_source_df$pred, c_source_df$obs, mode = "everything", positive="1")
    # This includes the Caret function, but gives us a better output 
    mc_df <- ConfusionTableR::binary_class_cm(c_source_df$pred, c_source_df$obs,
                                         mode="everything")
    out <- cbind.data.frame(c_source = met, mc_df$record_level_cm)
    
  print(met)

  F1_c_source_list[[met]] <- out

  # If we assign F1 to zero when precision and recall are both zero:
  #https://datascience.stackexchange.com/questions/72074/can-the-f1-score-be-equal-to-zero
}

F1_c_source <- do.call(rbind, F1_c_source_list)

#write.table(F1_c_source, "/projectnb/talbot-lab-data/metabolic_models/aeng/F1_c_source.csv", sep = ",")
```

Calculating F1 score for models

```{r}
models_list <- list("MP5ACTX8", "MP5ACTX9", "SP1PR4", "capsulatum", "Ellin345", "solibacter", "GAS232", "EB95", "AB60", "AB23", "aggregatus", "elongata", "MP5ACTX2", "rosea_T4", "methylaliphatogenes_K22", "roseus")

F1_model_list <- c()
for (mod in models_list) {
  
  model_df <- merge(models_lit_long[models_lit_long$modelID == mod,] %>% select(modelID, c_source, obs = value), 
                       cobra_sims_long[cobra_sims_long$modelID == mod,] %>% select(modelID, c_source, pred = comp, validation))
  # Remove missing observations
  model_df <- model_df %>% filter(!is.na(obs))
   
  # Convert to factors
    model_df <- model_df %>% mutate(pred = factor(model_df$pred, levels=c("1","0")),
                                          obs = factor(model_df$obs, levels=c("1","0")))
    
    #confusion_results <- confusionMatrix(c_source_df$pred, c_source_df$obs, mode = "everything", positive="1")
    # This includes the Caret function, but gives us a better output 
    mc_df <- ConfusionTableR::binary_class_cm(model_df$pred, model_df$obs,
                                         mode="everything")
    out <- cbind.data.frame(modelID = mod, mc_df$record_level_cm)
    
  print(met)

  F1_model_list[[mod]] <- out

  # If we assign F1 to zero when precision and recall are both zero:
  #https://datascience.stackexchange.com/questions/72074/can-the-f1-score-be-equal-to-zero
}

F1_models <- do.call(rbind, F1_model_list)

#write.table(F1_models, "/projectnb/talbot-lab-data/metabolic_models/aeng/F1_models.csv", sep = ",")
```

## Model validation plots
Heat map showing TP, TN, FP, FN
```{r}
ggplot(cobra_sims_long, aes(c_source, modelID)) + geom_tile(aes(fill = validation), colour = "white") +
  scale_fill_hue() +
  #scale_fill_gradient(low = "blue", high = "red") +
  xlab("Metabolite") +
  ylab("Model") +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 50, hjust = 1, vjust = 1))
```

Fractional bar plot showing validation results by C source
```{r}
df <- cobra_sims_long %>% 
    filter(!is.na(validation)) %>% 
    group_by(c_source, validation) %>%
    mutate(n_val_group = length(validation)) %>% ungroup() %>% 
    group_by(c_source) %>% 
    mutate(frac = n_val_group / length(validation))

ggplot(df, aes(x = c_source, y = frac, fill = validation)) +
    geom_col(position = "fill") + coord_flip() + theme_bw()
```

Fractional bar plot showing validation results by model
```{r}
df <- cobra_sims_long %>% 
    filter(!is.na(validation)) %>% 
    group_by(modelID, validation) %>%
    mutate(n_val_group = length(validation)) %>% ungroup() %>% 
    group_by(modelID) %>% 
    mutate(frac = n_val_group / length(validation))

ggplot(df, aes(x = modelID, y = frac, fill = validation)) +
    geom_col(position = "fill") + coord_flip() + theme_bw()
```

## Validation statistics plots
Radar plots for validation statistics
```{r}
modelID <- read_sheet("https://docs.google.com/spreadsheets/d/1YWAp-wdQWh9OHmw82w-2QuqsCYh3IgXh4QE17t7en0g/edit#gid=771669281", sheet = "modelID")

genomes <- modelID %>%
  select(c("modelID", "genome size (bp)", "subgroup"))
colnames(genomes)[2] <- "genome"

models_validation <- merge(F1_models, genomes)
```

```{r}
# subset data frame to contain data we want
# F1, accuracy, specificity, sensitivity, precision
stats <- models_validation %>% select(c("modelID", "F1", "Accuracy", "Specificity", "Sensitivity", "Precision"))
```

```{r}
radar_df = stats[stats$modelID == "AB23",][,-1]
radar_df = stats[stats$modelID == "AB60",][,-1]
radar_df = stats[stats$modelID == "aggregatus",][,-1]
radar_df = stats[stats$modelID == "capsulatum",][,-1]
radar_df = stats[stats$modelID == "EB95",][,-1]
radar_df = stats[stats$modelID == "Ellin345",][,-1]
radar_df = stats[stats$modelID == "elongata",][,-1]
radar_df = stats[stats$modelID == "GAS232",][,-1]
radar_df = stats[stats$modelID == "methylaliphatogenes_K22",][,-1]
radar_df = stats[stats$modelID == "MP5ACTX2",][,-1]
radar_df = stats[stats$modelID == "MP5ACTX8",][,-1]
radar_df = stats[stats$modelID == "MP5ACTX9",][,-1]
radar_df = stats[stats$modelID == "rosea_T4",][,-1]
radar_df = stats[stats$modelID == "roseus",][,-1]
radar_df = stats[stats$modelID == "solibacter",][,-1]
radar_df = stats[stats$modelID == "SP1PR4",][,-1]

radar_df = stats[stats$modelID == c("solibacter","SP1PR4"),][,-1]

radar_df <- rbind(rep(1,5) , rep(0,5) , radar_df) # add rows for max and min (1 and 0 for all metrics)
radarchart(df = radar_df, axistype = 4,
           pty = 32,
           pcol = "#00AFBB", pfcol = scales::alpha("#00AFBB", 0.5), plwd = 2, plty = 1,
           cglcol = "grey", cglty = 1, cglwd = 0.8,
           axislabcol = "grey")
```

Reading in data for CarveMe model organism results
```{r}
rsolanacearum <- read.csv("/projectnb2/talbot-lab-data/metabolic_models/scripts/carveme_paper/results/biolog/rsolanacearum_main.csv", sep = ",") %>% mutate(modelID = "R. solanacearum", model_type="Model organism")
soneidensis <- read.csv("/projectnb2/talbot-lab-data/metabolic_models/scripts/carveme_paper/results/biolog/soneidensis_main.csv", sep = ",") %>% mutate(modelID = "S. oneidensis", model_type="Model organism")
paeruginosa <- read.csv("/projectnb2/talbot-lab-data/metabolic_models/scripts/carveme_paper/results/biolog/paeruginosa_main.csv", sep = ",")  %>% mutate(modelID = "P. aeruginosa", model_type="Model organism")
bsubtilis <- read.csv("/projectnb2/talbot-lab-data/metabolic_models/scripts/carveme_paper/results/biolog/bsubtilis_main.csv", sep = ",")  %>% mutate(modelID = "B. subtilis", model_type="Model organism")
ecoli <- read.csv("/projectnb2/talbot-lab-data/metabolic_models/scripts/carveme_paper/results/biolog/ecoli_main.csv", sep = ",") %>% mutate(modelID = "E. coli", model_type="Model organism")
```

```{r}

carveme_orgs_list <- list(rsolanacearum, soneidensis, paeruginosa, bsubtilis, ecoli)
carveme_stats <- lapply(carveme_orgs_list, function(x){
  x[2,] %>% select(c("modelID", "model_type","F1" = "F1.score", "Accuracy", "Sensitivity", "Specificity", "Precision"))
})
carveme_stats_df <- map_df(carveme_stats, as.data.frame)
colnames(carveme_stats_df)[1] <- "F1"
carveme_stats_df <- as.data.frame(carveme_stats_df)

#carveme_orgs <- c("rsolanacearum", "soneidensis", "paeruginosa", "bsubtilis", "ecoli")
#carveme_orgs_list <- list(rsolanacearum, soneidensis, paeruginosa, bsubtilis, ecoli)
#carveme_stats <- lapply(carveme_orgs_list, function(x){
#  x[2,] %>% select(c("F1.score", "Accuracy", "Sensitivity", "Specificity", "Precision"))
#})
#carveme_stats_list <- map(carveme_stats, as.data.frame)
#carveme_stats_df <- rbindlist(carveme_stats_list, fill = TRUE, idcol = T)
#carveme_stats_df <- carveme_stats_df[,2:6]
#colnames(carveme_stats_df)[1] <- "F1"
#carveme_stats_df <- as.data.frame(carveme_stats_df)
```

```{r}


radar_models_df <- rbind(rep(1,5) , rep(0,5) , carveme_stats_df) 
rownames(radar_models_df) <- c("max", "min", "rsolanacearum", "soneidensis", "paeruginosa", "bsubtilis", "ecoli")

colors <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854")
radarchart(df = radar_models_df, axistype = 4,
           pty = 32,
           pcol = colors, pfcol = scales::alpha(colors, 0.1), plwd = 2, plty = 1,
           cglcol = "grey", cglty = 1, cglwd = 0.8,
           axislabcol = "grey")
legend(x = 1, y = 1.35, legend = rownames(radar_models_df[-c(1,2),]), bty = "n", pch = 20 , col = colors , text.col = "grey", cex = 1, pt.cex = 2)
```

```{r}
stats$model_type="Acidobacteria"

to_compare <- rbind.data.frame(carveme_stats_df, stats)

t.test(F1 ~ model_type, data = to_compare) # p = .056
t.test(Accuracy ~ model_type, data = to_compare) # p = .926
t.test(Sensitivity ~ model_type, data = to_compare) # p = .477
t.test(Specificity ~ model_type, data = to_compare) # p = .386 # this one has many NAs
t.test(Precision ~ model_type, data = to_compare) # p = .042

# Add max/min row
radar_models_df <- to_compare %>% rbind(1) %>% rbind(0)


#colors <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854")
radarchart(df = radar_models_df, axistype = 4,
           pty = 32,
           pcol = colors, pfcol = scales::alpha(colors, 0.1), plwd = 2, plty = 1,
           cglcol = "grey", cglty = 1, cglwd = 0.8,
           axislabcol = "grey")
legend(x = 1, y = 1.35, legend = rownames(radar_models_df[-c(1,2),]), bty = "n", pch = 20 , col = colors , text.col = "grey", cex = 1, pt.cex = 2)

```

