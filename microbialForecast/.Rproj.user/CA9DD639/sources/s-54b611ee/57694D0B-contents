
library(FME)
library(tidyverse)

#Assuming that DAMM-MCNiPv0 is the working directory, reads in flux data
df <- read.csv(paste0(getwd(),"/HF243-01_2009_Trenched_Flux.csv"))
data09 = df[,"data"]
damm09 = df[,"damm"]
arrhenius09 = df[,"arrhenius"]

#Set up color palette for plotting
cbPalette <- c("#000000","#E69F00", "#009E73", "#0072B2", "#CC79A7", "#D55E00", "#56B4E9",    "#F0E442")
seq = seq(-1,4.5)

#Set x-axes: decimal doy in hourly increments

xa09 = seq(113,(113+189), length.out = length(data09))       #data
xb09 = seq(113,(113+189), length.out = 4558)                 #damm-mcnip
xc09 = seq(113,(113+189), length.out = length(damm09))       #damm alone
xd09 = seq(113,(113+189), length.out = length(arrhenius09))  #arrhenius


parameters <- read.csv(paste0(getwd(),"/parameters.csv"))

inputdata <- read.csv(paste0(getwd(),"/inputdata.csv"))

p = parameters$fitted2009 #select either default parameters or fitted to 2009 flux data

#seasonal doc input
A1=0.0005        #seasonal amplitude
A2=0            #daily amplitude
w1=2*pi/4559
w2=2*pi
dref=0.0005     #reference input
t=1:4559
DOC_input = dref+A1*sin(w1*t-pi/2)+A2*sin(w2*t) # mg C cm-3 soil hour-1

#seasonal litter input
A1=0.0005       #seasonal amplitude
A2=0            #daily amplitude
w1=2*pi/4559
w2=2*pi
lref=0.0005     #reference input
t=1:30
Litterc_input = lref+A1*sin(w1*t-pi/2)+A2*sin(w2*t) # mg C cm-3 soil hour-1

t = time
s = state
p = pars
mic_c = 1.9703
mic_n = 0.1970
soc = 65.25
son = 2.1917
doc = 0.0020
don = 0.0011
ec = 0.0339
cout = 0


Model <- function (p, times=seq(1,30), init_s = c(mic_c = 1.9703, mic_n = 0.1970, soc = 65.25 , son = 2.1917, doc = 0.0020, don = 0.0011, ec = 0.0339, cout = 0, nmin=.01), init_cns = NULL) {
	s = init_s
	#print(init_s)
    derivs <- function(t,s,p,init_cns=NULL) { #t = time, s = state, p = pars
        with(as.list(c(s,p)), {
              #define parameters
              r <- 0.008314                         #gas constant
              ea_dep <- p[1]                        #activation energy of SOM depolymerization
              ea_upt <- p[2]                        #activation energy of DOC uptake
              a_dep <- p[3]                         #pre-exponential constant for SOM depolymerization
              a_upt <- p[4]                         #pre-exponential constant for uptake
              frac <- p[5]                          #fraction of unprotected SOM, Magill et al. 2000
              litter_c <- litterc_inputin(t)        #litter C input to SOC
              cnl <- p[8]                           #C:N of litter
              litter_n <- litterc_inputin(t)/cnl    #litter N input to SOC
              doc_input <- doc_inputin(t)           #litter C input to DOC
              cns <- ifelse(is.null(init_cns), p[9],init_cns)                     #C:N of soil
              don_input <- doc_inputin(t)/cns       #litter N input to DOC
              cnm <- p[10]                          #C:N of microbial biomass
              cne <- p[11]                          #C:N of enzymes
              km_dep <- p[12]                       #half-saturation constant for SOM depolymerization
              km_upt <- p[13]                       #half-saturation constant for DOC uptake
              r_ecloss <- p[14]                     #enzyme turnover rate
              r_death <- p[15]                      #microbial turnover rate
              cue <- p[16]                          #carbon use efficiency
              a <- p[17]                            #proportion of enzyme pool acting on SOC
              pconst <- p[18]                       #proportion of assimilated C allocated to enzyme production
              qconst <- p[19]                       #proportion of assimilated N allocated to enzyme production
              mic_to_som <- p[20]                   #fraction of dead microbial biomass allocated to SOM
              km_o2 <- p[21]                        #Michaelis constant for O2
              dgas <- p[22]                         #diffusion coefficient for O2 in air
              dliq <- p[23]                         #diffusion coefficient for unprotected SOM and DOM in liquid
              o2airfrac <- p[24]                    #volume fraction of O2 in air
              bd <- p[25]                           #bulk density
              pd <- p[26]                           #particle density
              sat <- p[29]                          #saturation level

                    porosity = 1 - bd/pd            #calculate porosity
                    soilm = -p[27] + p[28]*mois(t)  #calculate soil moisture scalar
                    soilm = ifelse(soilm > sat, sat, soilm) #set upper bound on soil moisture (saturation)
                    soilm = ifelse(soilm < 0.1, 0.1, soilm) #set lower bound on soil moisture
                    o2 <- dgas * o2airfrac * (porosity - soilm)^(4/3) #calculate oxygen concentration
                    sol_soc <- dliq * soilm^3 * frac * soc            #calculate unprotected SOC
                    sol_son <- dliq * soilm^3 * frac * son            #calculate unprotected SON
                    vmax_dep = a_dep * exp(-ea_dep / (r * (temp(t) + 273))) #calculate maximum depolymerization rate
                    vmax_upt = a_upt * exp(-ea_upt / (r * (temp(t) + 273))) #calculate maximum depolymerization rate

                     upt_c <- mic_c * vmax_upt * doc / (km_upt + doc) * o2/(km_o2 + o2) #calculate DOC uptake
                     cmin <- upt_c * (1-cue)        #calculate initial C mineralization
                     upt_n <- mic_n * vmax_upt * don / (km_upt + don) * o2/(km_o2 + o2) #calculate DON uptake
                     death_c <- r_death * mic_c^2   #calculate density-dependent microbial C turnover
                     death_n <- r_death * mic_n^2   #calculate density-dependent microbial N turnover

                     enz_c <- pconst * cue * upt_c  #calculate potential enzyme C production
                     enz_n <- qconst * upt_n        #calculate potential enzyme N production
                     eprod <- ifelse(enz_c/cne >= enz_n, enz_n, enz_c/cne) #calculate actual enzyme based on Liebig's Law
                     growth_c <- (1-pconst) * (upt_c * cue) + enz_c - cne * eprod #calculate potential microbial biomass C growth
                     growth_n <- (1-qconst) * upt_n + enz_n - eprod #calculate potential microbial biomass N growth
                     growth <- ifelse(growth_c/cnm >= growth_n, growth_n, growth_c/cnm) #calculate actual microbial biomass growth based on Liebig's Law of the minimum (Schimel & Weintraub 2003 SBB)

                     overflow <- growth_c - cnm * growth #calculate overflow metabolism of C
                     nmin <- growth_n - growth           #calculate N mineralization

                     dmic_c <- cnm*growth - death_c      #calculate change in microbial C pool
                     dmic_n <- growth - death_n          #calculate change in microbial N pool

                     eloss <- r_ecloss * ec              #calculate enzyme turnover
                     dec <- eprod - eloss                #calculate change in enzyme pool

                     decom_c = vmax_dep * a * ec * sol_soc / (km_dep + sol_soc + ec) #calculate depolymerization of SOC using ECA kinetics (Tang 2015 GMD)
                     decom_n = vmax_dep * (1-a) * ec * sol_son / (km_dep + sol_son + ec) #calculate depolymerization of SON using ECA kinetics

                    dsoc = litter_c + death_c * mic_to_som - decom_c #calculate change in SOC pool
                    dson = litter_n + death_n * mic_to_som - decom_n #calculate change in SON pool
                    ddoc = doc_input + decom_c + death_c * (1-mic_to_som) + cne*eloss - upt_c #calculate change in DOC pool
                    ddon = don_input + decom_n + death_n * (1-mic_to_som) + eloss - upt_n #calculate change in DON pool
                    dcout = cmin + overflow         #calculate C efflux
                    #return(list(c(dmic_c, dmic_n, dsoc, dson, ddoc, ddon, dec, dcout)))
                    return(list(c(dmic_c, dmic_n, dsoc, dson, ddoc, ddon, dec, dcout, nmin)))
        })
    }





 #   s <- c(mic_c = 1.9703, mic_n = 0.1970, soc = 65.25 , son = 2.1917, doc = 0.0020, don = 0.0011, ec = 0.0339, cout = 0) #initial states

    # random nmin value
    #s <- c(mic_c = 1.9703, mic_n = 0.1970, soc = 65.25 , son = 2.1917, doc = 0.0020, don = 0.0011, ec = 0.0339, cout = 0, nmin=.01) #initial states
    temp <- approxfun(input$indexHour, input$temperatureC) #temperature input function
    mois <- approxfun(input$indexHour, input$moistureVWC) #moisture input function
    doc_inputin <- approxfun(1:nhours_minus_1,DOC_input[1:30]) #DOC input function
    litterc_inputin <- approxfun(1:nhours_minus_1,
                                 rep(Litterc_input, nhours_minus_1)) #SOC input function

    # y = s
    # times=seq(1,30)
    # func=derivs
    # parms = p

    output <- ode(y = s, times=times, func=derivs, parms = p) #solve ode, return output
    return(as.data.frame(
    	cbind(
    		time = output[1:29, 1],
    		cout = diff(output[1:30, "cout"]),
    		soc = output[1:29, "soc"],
    		mic_c = output[1:29, "mic_c"],
    		mic_n = output[1:29, "mic_n"],
    		son = output[1:29, "son"],
    		doc = output[1:29, "doc"],
    		don = output[1:29, "don"],
    		ec = output[1:29, "ec"],
    		nmin = output[1:29, "nmin"]
    	)
    ))
      # return(as.data.frame(cbind(time = output[1:4558,1], cout = diff(output[1:4559,"cout"]), soc = output[1:4558,"soc"], mic_c = output[1:4558,"mic_c"], mic_n = output[1:4558,"mic_n"], son = output[1:4558,"son"], doc = output[1:4558,"doc"], don = output[1:4558,"don"], ec = output[1:4558,"ec"] )))
}

out <- NULL                           #initalize output matrix
ptm <- proc.time()                    #start timer
input <- list(inputdata)[[1]]         #define input data
input <- list(inputdata)[[1]][1:30,]         #define input data
#init_cns = 
#out <- as.data.frame(Model(p, init_s = c(mic_c = 1.9703, mic_n = 0.1970, soc = 65.25 , son = 2.1917, doc = 0.0020, don = 0.0011, ec = 0.0339, cout = 0, nmin=0.1)), init_cns)        #run model
out2 = as.data.frame(Model(p, init_s = c(mic_c = 1.9703, mic_n = 0.1970, soc = 65.25 , son = 2.1917, doc = 0.0020, don = 0.0011, ec = 0.0339, cout = 0, nmin=0.3)))        #run model

out3 = as.data.frame(Model(p, init_s = c(mic_c = 1.9703, mic_n = 0.1970, soc = 65.25 , son = 2.1917, doc = 0.0020, don = 0.0011, ec = 0.0339, cout = 0, nmin=0)))        #run model
proc.time() - ptm                     #end timer

save(out, file="DAMM-MCNiP_output.Rdata") #save output

head(out)

#convert to g cm-3 hr-1
arr09 <- arrhenius09/100
dam09 <- damm09/100
dmc09 <- out$cout*1000
datas09 <- data09/100


# Read in soil data
soilData <- readRDS("/projectnb2/talbot-lab-data/zrwerbin/interactions/data/DAMM_inputs.rds")
soilData_harv <- soilData %>% filter(siteID=="HARV" & !is.na(netNitugPerGramPerDay) & !is.na(soilMoisture))
soilData_harv_all <- soilData %>% filter(siteID=="HARV")

# Use sample data to create input parameters for model run
plotID = "HARV_002"
horizon = "O"

plotID_nmin = list()
plotID_nitr = list()
plotID_sim = list()
for (plotID in unique(soilData_harv$plotID)) {
	print(plotID)
# for (plotID in c("HARV_001", "HARV_002", "HARV_004", "HARV_005", "HARV_013",
# 								"HARV_021", "HARV_033", "HARV_034", "HARV_035", "HARV_037")) {
  plotID_data_rates <- soilData_harv %>% filter(plotID == !!plotID & horizon == !!horizon & grepl("2018", sampleID))
  plotID_data <- soilData_harv_all %>% filter(plotID == !!plotID & horizon == !!horizon & grepl("2018", sampleID))
  
  print(plotID_data[,c("sampleID","CNratio","nitrogenPercent","organicCPercent","d15N","organicd13C","soilMoisture","soilTemp")])

  #soil_mois = mean(plotID_data$soilMoisture, na.rm = T) * .1
  soil_mois = mean(plotID_data$sensor_moisture, na.rm = T) 
  # soil_mois = mean(plotID_data$vol_SoilMoisture, na.rm = T) 
  # soil_mois = ifelse(is.na(soil_mois), 
  #                    mean(plotID_data$vol_SoilMoisture_site, na.rm = T), # use site-level BD if necessary  
  #                    soil_mois)
  soil_temp = mean(plotID_data$soilTemp, na.rm = T)
  soil_C = mean(plotID_data$organicCPercent * 10, na.rm = T) # convert from percent to mg/cm-3
  soil_C = mean(plotID_data$organicCPercent, na.rm = T) 
  soil_N = mean(plotID_data$nitrogenPercent * 10, na.rm = T) # convert from percent to mg/cm-3
# soil_N_ug_g = mean(plotID_data$nitrogenPercent * 10000, na.rm = T) # convert from percent to ug/g (unit for Nitr equation)
# soil_N_ug_g = mean(plotID_data$nitrogenPercent, na.rm = T) # leave in ~0-10 range (unit for Nitr equation)
# 
# soil_N = mean(plotID_data$soilInorganicNugPerGram, na.rm = T) # Supposed to be ON, not Inorganic
CNratio = mean(plotID_data$CNratio, na.rm = T)

input = data.frame(indexHour = 1:30, moistureVWC = rep(soil_mois,30), temperatureC = rep(soil_temp, 30))
out_damm = as.data.frame(Model(p, init_s = c(mic_c = 1.9703,
																				 mic_n = 0.1970,
																				 soc = soil_C,
																				 #son = soil_N,
																				 son = 2.192,
																				 doc = 0.0020,
																				 don = 0.0011,
																				 ec = 0.0339,
																				 cout = 0,
																				 nmin=0),
													 init_cns = CNratio))        #run model
nmin_total = sum(out_damm$nmin)
nmin_daily = nmin_total/nrow(out_damm) # divide to get daily rates


# nitrification equation taken from Averill & Waring 2017 supplement
soil_pH = mean(plotID_data$soilInCaClpH, na.rm=T)
opt_pH = 7
ph_ratio = soil_pH/opt_pH
#nitrification = soil_N * ph_ratio
nitrification = soil_N_ug_g * ph_ratio
nitrification = soil_N_ug_g * ph_ratio
nitr_daily =  nitrification/nrow(out_damm)

# Save output
sim_output = cbind.data.frame(plotID = plotID,
                              nmin_sim = nmin_daily,
                              nmin_total = nmin_total,
                              nitr_sim = nitr_daily)
plotID_sim[[plotID]] = sim_output
}
sim_allplots = do.call(rbind, plotID_sim)


N_rates = readRDS("/projectnb2/talbot-lab-data/zrwerbin/interactions/data/DAMM_val_N_rates.rds")

#compare_rates <- merge(N_rates, sim_allplots, by = "plotID")

compare_rates <- merge(soilData_harv, sim_allplots, by = "plotID")
ggplot(compare_rates) + geom_point(aes(x = nmin_sim, y = netNminugPerGramPerDay))
ggplot(compare_rates) + geom_point(aes(x = nitr_sim, y = netNitugPerGramPerDay))
sim_allplots
# Nitrification varies between -.3 and .6
# Nmin varies between -3 and 7
soil_N_dat = N_rates %>% filter(!is.na(netNitugPerGramPerDay))
soil_N_dat = soil_N_dat %>% mutate(eq_nitr = soilInorganicNugPerGram*(soilInCaClpH/opt_pH))
ggplot(soil_N_dat) + geom_point(aes(x = eq_nitr, y = netNitugPerGramPerDay))

#nitrification = soil_N * ph_ratio
nitrification = soil_N_ug_g * ph_ratio


N_rates_HARV = readRDS("/projectnb2/talbot-lab-data/zrwerbin/interactions/data/HARV_DAMM_val_N_rates.rds")

soilData <- readRDS("/projectnb2/talbot-lab-data/zrwerbin/interactions/data/DAMM_inputs.rds")
soilData_harv <- soilData %>% 
  filter(siteID=="HARV" & !is.na(netNitugPerGramPerDay) & !is.na(soilMoisture)) %>% 
  distinct(.keep_all=T) %>% 
  filter(soilInorganicNugPerGram < 50)
soilData_harv = soilData_harv %>% mutate(
  eq_nitr = soilInorganicNugPerGram*(soilInWaterpH/opt_pH),
                                         eq_nitr1 = soilInorganicNugPerGram*(soilInWaterpH/opt_pH),
                                         eq_nitr2 = (initNitrateNitrite+initAmmonium)*(soilInWaterpH/opt_pH),
                                         eq_nitr3 = (nitrogenPercent*10)*(soilInWaterpH/opt_pH),
  eq_nitr4 = soilNitrateNitriteNugPerGram*(soilInWaterpH/opt_pH))

