remotes::install_github("fbreitwieser/pavian")

library(pavian)
library(tidyverse)
summarize_report_custom <- function(my_report) {
	protist_taxids <- c("-_Diplomonadida"=5738,
											"-_Amoebozoa"=554915,
											"-_Alveolata"=33630)
	rownames(my_report)[rownames(my_report) == "r_root"] <- "-_root"
	my_report <- my_report[!duplicated(my_report$name),]
	row.names(my_report) <- my_report[["name"]]
	unidentified_reads <- my_report["u_unclassified","cladeReads"]
	identified_reads <- my_report["r_root","cladeReads"]
	artificial_reads <- pavian:::zero_if_na1(my_report["s_synthetic construct", 
																										 "cladeReads"])
	human_reads <- pavian:::zero_if_na1(my_report["s_Homo sapiens", "cladeReads"])
	chordate_reads <- pavian:::zero_if_na1(my_report["p_Chordata", "cladeReads"])
	root_reads <- pavian:::zero_if_na1(my_report["r_root", "taxonReads"])
	out <- data.frame(number_of_raw_reads = unidentified_reads + identified_reads, 
										classified_reads = identified_reads, chordate_reads = chordate_reads, 
										artificial_reads = artificial_reads, unclassified_reads = unidentified_reads, 
										microbial_reads = identified_reads - chordate_reads - 
											artificial_reads - root_reads, bacterial_reads = pavian:::zero_if_na1(my_report["d_Bacteria", 
																																																			"cladeReads"]) + pavian:::zero_if_na1(my_report["k_Bacteria", 
																																																																											"cladeReads"]), viral_reads = pavian:::zero_if_na1(my_report["d_Viruses", 
																																																																																																									 "cladeReads"]) + pavian:::zero_if_na1(my_report["k_Viruses", 
																																																																																																									 																								"cladeReads"]), fungal_reads = pavian:::zero_if_na1(my_report["k_Fungi", 
																																																																																																									 																																																							"cladeReads"]), protozoan_reads = sum(pavian:::zero_if_na1(my_report[names(protist_taxids), 
																																																																																																									 																																																																																									 "cladeReads"])))
}

library(pavian)

report1 <- read_report2("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output/k2_report.txt")



for (samp in samp_names){
	
	output_standard <- file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output", paste0(samp, "_standard.tar.gz" ))
	output_pluspf <- file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output", paste0(samp, "_pluspf.tar.gz" ))
	
	if (!file.exists(file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output", paste0(samp, "_k2_report_standard.txt")))){
	if (file.exists(output_standard)){
	out.tar.path <- file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output/standard/", samp)
	untar(output_standard, exdir = out.tar.path, verbose = T)
	file.rename(file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output/standard/", samp, "output/k2_report.txt"), 
							file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output", paste0(samp, "_k2_report_standard.txt")))
	file.rename(file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output/standard/", samp, "output/output.txt"), 
							file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output", paste0(samp, "_output_standard.txt")))
	unlink(out.tar.path, recursive=T)
	}
	}
	
	
	if (!file.exists(file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output", paste0(samp, "_k2_report_pluspf.txt")))){
	if (file.exists(output_pluspf)){
	out.tar.path <- file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output/pluspf/", samp)
	untar(output_pluspf, exdir = out.tar.path, verbose = T)
	file.rename(file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output/pluspf/", samp, "output/k2_report.txt"), 
							file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output", paste0(samp, "_k2_report_pluspf.txt")))
	file.rename(file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output/pluspf/", samp, "output/output.txt"), 
							file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output", paste0(samp, "_output_pluspf.txt")))
	unlink(out.tar.path, recursive=T)
	}
	}
}

out <- list()

samp_names <- c("HARV_001-M-25-38-20130709-gen","HARV_001-O-20160803-COMP-DNA1_mms","HARV_002-O-20180711-COMP-DNA1", "HARV_004-O-20131122-comp","HARV_004-O-31-8-20131122-gen","HARV_010-O-20160803-COMP-DNA1_mms")
for (samp in samp_names){
	
	print(samp)
standard_path <-	file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output", paste0(samp, "_k2_report_standard.txt"))
pluspf_path <- file.path("/projectnb2/talbot-lab-data/zrwerbin/toolchest/output", paste0(samp, "_k2_report_pluspf.txt")) 

if (file.exists(standard_path) & file.exists(pluspf_path)){
		
report_standard <- read_report2(standard_path)
report_pluspf <- read_report2(pluspf_path)
report <- merge_reports2(list(report_standard, report_pluspf))


summary_standard <- summarize_report_custom(report_standard) %>% mutate(database = "standard") 
summary_pluspf <- summarize_report_custom(report_pluspf) %>% mutate(database = "pluspf")
#samples_summary <- data.table::rbindlist(list(summary_standard, summary_pluspf)) %>% mutate(name = samp)
samples_summary <- rbind(summary_standard, summary_pluspf) %>% mutate(name = samp)
colnames(samples_summary) <- pavian:::beautify_string(colnames(samples_summary))

raw_reads_column <- 1
classified_reads_column <- 2
microbial_reads_column <- 6
samples_summary[, classified_reads_column:(ncol(samples_summary)-2)] <- 
	signif(100 * sweep(samples_summary[, classified_reads_column:(ncol(samples_summary)-2)], 1, samples_summary[, raw_reads_column], `/`),3)
out[[samp]] <- samples_summary
} else {
	print(paste0("skipping ", samp))
	next()
}
}

all_samp_df <- do.call(rbind, out)
saveRDS(all_samp_df, "/projectnb2/talbot-lab-data/zrwerbin/toolchest/kraken_pct_classified.rds")


#### Visualize ------- (Fig 2 in Werbin et al. 2021)
colnames(df)[1:2]=c("group","count")
ggplot(all_samp_df) + geom_point(aes(x = reorder(db, freq), y = freq, color = sampleID), size = 3) + 
	theme_minimal(base_size = 20) + xlab("Database name") + ylab("Proportion of paired reads") + 
	ggtitle("Proportion of classified reads with Kraken2") + #ylim(c(0, .2)) + 
	geom_text(
		aes(x = db, label = round(freq, 4), color = sampleID, y = freq + 0.001),
		#position = position_dodge(.9),
		vjust = 0, size = 6,
	)


text_df <- all_samp_df %>% group_by(Database) %>% summarize(median=median(`Classified reads`, na.rm=T))
ggplot(all_samp_df, aes(x = reorder(Database, `Classified reads`), y = `Classified reads`)) + 
	geom_boxplot() +
	geom_point(aes(color = `Number of raw reads`), position=position_jitter(width = .05), size = 5, alpha = .8) + 
	theme_minimal(base_size = 20) + xlab("Database name") + ylab("Percent of paired reads") + 
	ggtitle("Percent classified reads with Kraken2") + #ylim(c(0, .2)) + 
	geom_text(data = text_df,
		aes(x = Database, label = paste0("Median: \n", round(median, 3),"%"), y = 17),
		#position = position_dodge(.9),
		hjust = 1.3, size = 6,
	) + scale_x_discrete(labels = c("Standard","PlusPF"))


library(ggpubr)
pluspf <- all_samp_df[all_samp_df$Database=="pluspf",]
ggplot(pluspf, aes(x = `Classified reads`, y = `Number of raw reads`)) + 
	geom_point(size=5, alpha=.5) +
	geom_smooth(method = "lm")+
	stat_regline_equation(  aes(label =  paste(..eq.label.., ..adj.rr.label.., sep = "~~~~")),
													label.x = 10, 
													label.y = 8000000) +
	stat_cor(label.y = 7000000, label.x = 10) +
#	geom_point(aes(color = `Number of raw reads`), position=position_jitter(width = .05), size = 5) + 
	theme_minimal(base_size = 20) + xlab("Percent classified reads") + ylab("Number of raw reads")


ggplot(pluspf, aes(x = `Fungal reads`, y = `Number of raw reads`)) + 
	geom_point(size=5, alpha=.5) +
	geom_smooth(method = "lm")+
	stat_regline_equation(  aes(label =  paste(..eq.label.., ..adj.rr.label.., sep = "~~~~")),
													label.x = .02, label.y = 4000000) +
	stat_cor(label.x = .02, label.y = 3000000) +
	#	geom_point(aes(color = `Number of raw reads`), position=position_jitter(width = .05), size = 5) + 
	theme_minimal(base_size = 20) + xlab("Percent fungal reads") + ylab("Number of raw reads")
