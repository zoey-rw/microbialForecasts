# Add scoring metrics


source("https://raw.githubusercontent.com/colinaverill/NEFI_microbe/master/NEFI_functions/rsq_1.1.r")


predictive_loss = function(observed, predicted, predicted_sd){
	npred = length(predicted)
	predictive_variance = predicted_sd^2
	residual_variance = (predicted - observed)^2
	P = sum(predictive_variance, na.rm=T)/npred
	G = sum(residual_variance, na.rm=T)/npred
	total_PL = P+G
	data.frame(total_PL = total_PL, predictive_variance=P, residual_variance=G)
	
}

# observed = cal_test$truth
# mean_predicted = cal_test$Mean
# sd_predicted = cal_test$SD
# type=c("RMSE","BIAS","MAE",
# 			 "CRPS", "RSQ", "RSQ.1", 
# 			 "RMSE.norm",  "residual_variance", "predictive_variance", "total_PL")
# 
# add_scoring_metrics(observed = cal_test$truth,
# 										mean_predicted = cal_test$Mean,
# 										sd_predicted = cal_test$SD)

add_scoring_metrics = function(observed, mean_predicted, sd_predicted, 
															 type=c("RMSE","BIAS","MAE",
															 			 "CRPS", "RSQ", "RSQ.1", 
															 			 "RMSE.norm",  "residual_variance", "predictive_variance", "total_PL")){
	
	
	if(sum(is.na(observed )) > 0){stop('Error: NAs in observed vector.' )}
	if(sum(is.na(mean_predicted)) > 0){stop('Error: NAs in predicted vector.')}
	
	out_df <- cal_test %>%
	summarise(CRPS = mean(
		crps_norm(observed, mean_predicted, sd_predicted)),
						CRPS_truncated = mean(
							crps(observed,
				 									 family = "tnorm",
				 									 location = mean_predicted,
				 									 scale = sd_predicted, lower = 0, upper = Inf)),
		RMSE = rmse(actual = observed, predicted = mean_predicted),
		RSQ.1 = 1 - (RMSE^2)/var(observed),
		RSQ.1.colin = rsq_1.1(observed, mean_predicted),
		predictive_loss(observed, mean_predicted, sd_predicted),
		RMSE = rmse(actual = observed, predicted = mean_predicted),
		BIAS = bias(actual = observed, predicted = mean_predicted),
		MAE = mae(actual = observed, predicted = mean_predicted),
		MAPE = mape(actual = observed, predicted = mean_predicted),
		RSQ = summary(lm(observed ~ mean_predicted))$r.squared,
		abundance = mean(observed, na.rm=T),
		RMSE.norm = RMSE / abundance) %>% select(!!type)
	
return(out_df)
}
