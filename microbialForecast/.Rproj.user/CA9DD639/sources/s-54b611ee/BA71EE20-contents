options(scipen=1000)
library(minval)
# orig <- deparse1(writeSBMLmod, collapse = "\n")
# fixed <- gsub("extractData(inputData = modelData)","extractData(inputData = modelData, boundary = 'e')",orig, fixed = T)
# writeSBMLmod_custom <- 	eval(str2lang(fixed))
x <- "glu__45__L__91__c__93__"

fix_metabolite <- function(x){
	fine <- ifelse(grepl("\\[[[:alnum:]]*(\\_)?[[:alnum:]]*\\]$", x), T, F)
	if(fine){
		x <- str_replace_all(x,"\\[c\\]", "_c")
		x <- str_replace_all(x,"\\[p\\]", "_p")
		x <- str_replace_all(x,"\\[e\\]", "_e")
		return(x)
	} else {
	# Keep everything before the second underscore
#	simple <- strsplit(sub('(^[^_]+_[^_]+)_(.*)$', '\\1 \\2', simple), ' ')[[1]][[1]]
	simple <- strsplit(x, "_")[[1]][[1]]
	simple <- gsub("__45_|__91_|__93_", "_", x)
	compartment_letter <- ifelse(grepl("__c__", x), "c", 
															 ifelse(grepl("__e__", x), "e",  
															 			 ifelse(grepl("__p__", x), "p", "")))
	simple <- strsplit(simple, "__[cep]")[[1]][[1]]
	simple_compartment <- paste(simple, compartment_letter, sep = "_") 
	return(simple_compartment)
	}
}

removeCompartment <- function (metabolite, rmCoef = FALSE) {
	metabolite <- minval:::removeSpaces(metabolite = metabolite)
	if (rmCoef == TRUE) {
		metabolite <- removeCoefficients(metabolite)
	}
	metabolite <- gsub("\\_[[:alnum:]]$|\\[[[:alnum:]]*(\\_)?[[:alnum:]]*\\]$", 
										 "", metabolite)
	return(metabolite)
}

metabolites <- function (reactionList, woCompartment = FALSE, uniques = TRUE, metanet_replace = NULL) 
{
	reaction <- strsplit(as.vector(reactionList), "[[:blank:]]+<?=>[[:blank:]]*")
	reaction <- lapply(reaction, function(reaction) {
		strsplit(unlist(reaction), "[[:blank:]]+\\+[[:blank:]]+")
	})
	reaction <- lapply(reaction, function(reaction) {
		minval:::removeSpaces(unlist(reaction))
	})
	reaction <- lapply(reaction, function(reaction) {
		minval:::removeCoefficients(reaction)
	})
	metabolites <- unlist(reaction)
	if (woCompartment == TRUE) {
		metabolites <- removeCompartment(metabolites)
	}
	if (uniques == TRUE) {
		metabolites <- unique(metabolites)
	}
	
	# if (!is.null(metanet_replace)) {
	#   if (metabolites %in% c(""))
	#   metanet_id = metanet_replace[grepl(metabolites, metanet_replace$Metabolite.name),]$metanet_id %>% unique()
	#   metabolites = metanet_id
	# }
	return(metabolites)
}

metabolite <- '105.171 atp_c'
coefficients <- function (metabolite) 
{
	metabolite <- regmatches(x = metabolite, m = gregexpr(pattern = "^[[:digit:]]{0,5}[[:punct:]]*[[:digit:]]*[[:blank:]]+", 
																												text = metabolite))
	metabolite[lengths(metabolite) == 0] <- 1
	metabolite <- as.numeric(minval:::removeSpaces(metabolite))
	return(metabolite)
}

removeCoefficients <- function (metabolite) {
	metabolite <- gsub(pattern = "^[[:digit:]]{0,5}[[:punct:]]*[[:digit:]]*[[:blank:]]+", 
										 replacement = "", x = metabolite)
	return(metabolite)
}

compartments <- function (reactionList, uniques = TRUE) 
{
	if (uniques == TRUE) {
		metabolites <- metabolites(reactionList = reactionList, 
															 uniques = TRUE)
	}
	else {
		metabolites <- metabolites(reactionList = reactionList, 
															 uniques = FALSE)
	}
	compartments <- unlist(regmatches(x = metabolites, m = gregexpr(pattern = "\\_[[:alnum:]]$|\\[[[:alnum:]]*(\\_)?[[:alnum:]]*\\]$", 
																																	text = metabolites)))
	compartments <- gsub("\\_|\\[|\\]", "", compartments)
	if (length(compartments) == 0) {
		compartments <- ifelse(grepl("__c__", metabolites), "c", 
															 ifelse(grepl("__e__", metabolites), "e",  
															 			 ifelse(grepl("__p__", metabolites), "p", "")))
	}
	if (length(compartments) == 0) {
		compartments <- NA
	}
	if (uniques == TRUE) {
		compartments <- unique(compartments)
		return(compartments)
	}
	else {
		return(compartments)
	}
}


extractData <- function (inputData, boundary = "b") {
	exchange <- minval:::reactionType(inputData[["REACTION"]]) == "Exchange reaction"
	if (any(exchange) == TRUE) {
		# inputData[["REACTION"]][exchange] <- as.vector(sapply(metabolites(inputData[["REACTION"]][exchange]), 
		# 																											function(x) {
		# 																												paste0(x, " <=> ", 
		# 																															 paste0(metabolites(reactionList = x, woCompartment = TRUE), 
		# 																															 			 "[", boundary, "]"))
		# 																											}))
	}
	data <- list()
	data$COMPARTMENTS <- compartments(inputData[["REACTION"]])
	data$METABOLITES <- metabolites(inputData[["REACTION"]], 
																	uniques = TRUE)
	data$REACTIONS <- lapply(seq_along(inputData[["REACTION"]]), 
													 function(reaction) {
													 	list(id = as.vector(inputData[["ID"]])[reaction], 
													 			 reversible = ifelse(test = grepl(pattern = "<=>", 
													 			 																 x = inputData[["REACTION"]][reaction]), yes = "true", 
													 			 										no = "false"), gpr = as.vector(inputData[["GPR"]])[reaction], 
													 			 reactants = unlist(minval:::getLeft(inputData[["REACTION"]][reaction])), 
													 			 products = unlist(minval:::getRight(inputData[["REACTION"]][reaction])), 
													 			 lowbnd = ifelse(test = is.numeric(inputData[["LOWER.BOUND"]][reaction]), 
													 			 								yes = inputData[["LOWER.BOUND"]][reaction], 
													 			 								no = -1000), upbnd = ifelse(test = inputData[["UPPER.BOUND"]][reaction] != 
													 			 																							"", yes = inputData[["UPPER.BOUND"]][reaction], 
													 			 																						no = 1000), objective = ifelse(test = inputData[["OBJECTIVE"]][reaction] != 
													 			 																																					 	"", yes = inputData[["OBJECTIVE"]][reaction], 
													 			 																																					 no = 0))
													 })
	return(data)
}


rearmReactions <- minval:::rearmReactions


repair_SBML_model <- function (modelData, 
																	modelID = "model", 
																	boundary = "e") 
{
	if (class(modelData) == "data.frame") {
		modelData <- minval:::validateData(modelData = modelData)
		modelData <- minval:::removeComments(modelData = modelData)
		modelData <- modelData[minval:::validateSyntax(modelData[["REACTION"]]), 
		]
	} else if (class(modelData) == "modelorg") {
		if(length(modelData@gpr)==0) {
			modelData@gpr <- c(rep("", length(modelData@react_rev))) }
		modelData <- minval:::convertData(model = modelData)
	} else {
		stop("Input format not supported.")
	}
	modelData <- extractData(inputData = modelData, boundary = "e")
	header <- c("<?xml version=\"1.0\" encoding=\"UTF-8\"?>", 
							"<sbml xmlns=\"http://www.sbml.org/sbml/level2\" level=\"2\" version=\"1\">", 
							paste0("\t<model id=\"", modelID, 
										 "\" name=\"", modelID, "\">"), "\t\t<notes>", "\t\t\t<body xmlns=\"http://www.w3.org/1999/xhtml\">", 
							"\t\t\t<p> Generated with MINVAL: an R package for MINimal VALidation of stoichiometric reactions </p>", 
							"\t\t\t</body>", "\t\t</notes>")
	comp <- "\t\t<listOfCompartments>"
	comp <- c(comp, as.vector(sapply(modelData[["COMPARTMENTS"]], 
																	 function(compartment) {
																	 	paste0("\t\t\t<compartment id=\"", compartment, "\" name=\"", 
																	 				 compartment, "\"/>")
																	 })))
	comp <- c(comp, "\t\t</listOfCompartments>")
	mets <- "\t\t<listOfSpecies>"
	mets <- c(mets, sapply(modelData[["METABOLITES"]], function(metabolite) {
		metabolite = fix_metabolite(metabolite)
		paste0("\t\t\t<species id=\"M_", metabolite, "\" name=\"", 
					 metabolites(metabolite, woCompartment = TRUE, metanet_replace = metanet_replace), "\" compartment=\"", 
					 compartments(metabolite), "\" boundaryCondition=\"", 
					 ifelse(test = compartments(metabolite) == boundary, 
					 			 yes = "true", no = "false"), "\"/>")
	}))
	mets <- c(mets, "\t\t</listOfSpecies>")
	react <- "\t\t<listOfReactions>"
	react <- c(react, unlist(sapply(seq_along(modelData[["REACTIONS"]]), function(reaction) {
																		modelData[["REACTIONS"]][[reaction]][["id"]] <- janitor::make_clean_names(modelData[["REACTIONS"]][[reaction]][["id"]], case= "none")
																		
																		c(paste0("\t\t\t<reaction id=\"R_", modelData[["REACTIONS"]][[reaction]][["id"]], 
																						 "\"  reversible=\"", modelData[["REACTIONS"]][[reaction]][["reversible"]], 
																						 "\">"), 
																			paste0("\t\t\t\t<notes>"), 
																			paste0("\t\t\t\t\t<html xmlns=\"http://www.w3.org/1999/xhtml\">", 
																						 																					if (isTRUE(modelData[["REACTIONS"]][[reaction]][["gpr"]] != 
																						 																										 "")) {
																						 																						paste0("<p>GENE_ASSOCIATION: ", modelData[["REACTIONS"]][[reaction]][["gpr"]], 
																						 																									 "</p>")
																						 																					}, "</html>"), 
																			paste0("\t\t\t\t</notes>"), 
																			paste0("\t\t\t\t<listOfReactants>"), 
																			unname(sapply(X = modelData[["REACTIONS"]][[reaction]][["reactants"]], function(x) {
																						 	metabolite <- fix_metabolite(x)
																						 	paste0("\t\t\t\t\t<speciesReference species=\"M_", 
																						 				 metabolites(metabolite), "\" stoichiometry=\"", 
																						 				 coefficients(metabolite), "\"/>")
																						 })), 
																			paste0("\t\t\t\t</listOfReactants>"),
																			if(!is.na(modelData[["REACTIONS"]][[reaction]][["products"]][[1]])) {
																				c("\t\t\t\t<listOfProducts>",
																								 sapply(modelData[["REACTIONS"]][[reaction]][["products"]], 
																								 			 function(x) {
																								 			 	metabolite <- fix_metabolite(x)
																								 			 	c(paste0("\t\t\t\t\t<speciesReference species=\"M_", 
																								 			 					 metabolites(metabolite), "\" stoichiometry=\"", 
																								 			 					 coefficients(metabolite), "\"/>"))
																								 			 }),
																								 "\t\t\t\t</listOfProducts>")
																			#} else c("remove"))
																			},
																		#),
#																			paste0("\t\t\t\t</listOfProducts>"),
																		paste0("\t\t\t\t<kineticLaw>"), 
																			paste0("\t\t\t\t\t<math xmlns=\"http://www.w3.org/1998/Math/MathML\">"), 
																			paste0("\t\t\t\t\t\t<ci>FLUX_VALUE</ci>"), paste0("\t\t\t\t\t</math>"), 
																			paste0("\t\t\t\t\t<listOfParameters>"), paste0("\t\t\t\t\t\t<parameter id=\"LOWER_BOUND\" value=\"", 
																																										 modelData[["REACTIONS"]][[reaction]][["lowbnd"]], 
																																										 "\"/>"), paste0("\t\t\t\t\t\t<parameter id=\"UPPER_BOUND\" value=\"", 
																																										 								modelData[["REACTIONS"]][[reaction]][["upbnd"]], 
																																										 								"\"/>"), paste0("\t\t\t\t\t\t<parameter id=\"OBJECTIVE_COEFFICIENT\" value=\"", 
																																										 																modelData[["REACTIONS"]][[reaction]][["objective"]], 
																																										 																"\"/>"), paste0("\t\t\t\t\t\t<parameter id=\"FLUX_VALUE\" value=\"0\"/>"), 
																			paste0("\t\t\t\t\t</listOfParameters>"), paste0("\t\t\t\t</kineticLaw>"), 
																			paste0("\t\t\t</reaction>"))
																	})))
	#react <- gsub(pattern = "\t\t</listOfProducts>\t\t</listOfProducts>", "", react)
	react <- c(react, "\t\t</listOfReactions>")
	end <- c("\t</model>", "</sbml>")
	model <- as.vector(c(header, comp, mets, react, end))
	return(model)
}

